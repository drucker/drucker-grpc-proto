syntax = "proto3";

import "google/protobuf/descriptor.proto";
import "google/protobuf/struct.proto";

package rekcurd.protos;

// HealthCheckRequest message.
// https://github.com/grpc/grpc/blob/master/doc/health-checking.md
message HealthCheckRequest {
    string service = 1;
}

// HealthCheckResponse message.
// https://github.com/grpc/grpc/blob/master/doc/health-checking.md
message HealthCheckResponse {
    enum ServingStatus {
        UNKNOWN = 0;
        SERVING = 1;
        NOT_SERVING = 2;
    }
    ServingStatus status = 1;
}

// Health service.
// https://github.com/grpc/grpc/blob/master/doc/health-checking.md
service Health {
    rpc Check(HealthCheckRequest) returns (HealthCheckResponse);
}


// Rekcurd grpc spec version info.
extend google.protobuf.FileOptions {
    string rekcurd_grpc_proto_version = 50000;
}
option (rekcurd_grpc_proto_version) = "v3";

enum EnumVersionInfo {
    // Version info. The largest number is the latest version.
    v0 = 0;
    v1 = 1;
    v2 = 2;
    v3 = 3;
}


// RekcurdMessage message.
message RekcurdMessage {
    Status status = 1;
    JsonFormatString meta = 2;
    DefaultData data = 3;
    Score score = 4;
}

// Status message.
message Status {
    enum StatusFlag {
        SUCCESS = 0;
        FAILURE = 1;
    }

    int32 code = 1;
    string info = 2;
    string reason = 3;
    StatusFlag status = 4;
}

// JsonFormatString message.
message JsonFormatString {
    string val = 1;
}

// DefaultData message.
message DefaultData {
    repeated string names = 1;
    oneof data_oneof {
        Tensor tensor = 2;
        google.protobuf.ListValue ndarray = 3;
        bytes binData = 4;
        string strData = 5;
        StringList strDataList = 6;
    }
}

// Tensor message.
message Tensor {
    repeated int32 shape = 1;
    repeated double val = 2;
}

// StringList message.
message StringList {
    repeated string val = 1;
}

// Score message.
message Score {
    repeated float val = 1;
}

// ServiceInfoRequest message.
message ServiceInfoRequest {}

// ServiceInfoResponse message.
message ServiceInfoResponse {
    Status status = 1;
    string applicationName = 2;
    string serviceName = 3;
    string serviceLevel = 4;
}

// FileStream message.
message FileStream {
    bytes binData = 1;
    string filePath = 2;
}

// SwitchModelRequest message.
message SwitchModelRequest {
    string filePath = 1;
}

// EvaluationDataPath message.
message EvaluationDataPath {
    string dataPath = 1;
    string resultPath = 2;
}

// EvaluationMetrics message.
message EvaluationMetrics {
    int32 num = 1;
    float accuracy = 2;
    repeated float precision = 3;
    repeated float recall = 4;
    repeated float fvalue = 5;
    StringList label = 6;
    JsonFormatString option = 7;
}

// EvaluationResponse message.
message EvaluationResponse {
    Status status = 1;
    EvaluationMetrics metrics = 2;
}

// EvaluationResultResponse message.
message EvaluationResultResponse {
    message Detail {
        RekcurdMessage input = 1;
        RekcurdMessage output = 2;
        StringList label = 3;
        bool isCorrect = 4;
    }

    Status status = 1;
    EvaluationMetrics metrics = 2;
    repeated Detail detail = 3;
}


// RekcurdDashboard service.
service RekcurdDashboard {
    // ServiceInfo rpc.
    rpc ServiceInfo (ServiceInfoRequest) returns (ServiceInfoResponse) {}
    // UploadModel rpc.
    // :NOTE: This method won't be used from Rekcurd-dashboard users.
    rpc UploadModel (stream FileStream) returns (Status) {}
    // SwitchModel rpc.
    // :NOTE: This method won't be used from Rekcurd-dashboard users.
    rpc SwitchModel (SwitchModelRequest) returns (Status) {}
    // UploadEvaluationData rpc.
    // :NOTE: This method won't be used from Rekcurd-dashboard users.
    rpc UploadEvaluationData (stream FileStream) returns (Status) {}
    // EvaluateModel rpc.
    rpc EvaluateModel (EvaluationDataPath) returns (EvaluationResponse) {}
    // EvaluationResult rpc.
    rpc EvaluationResult (EvaluationDataPath) returns (stream EvaluationResultResponse) {}
}

// RekcurdWorker service.
service RekcurdWorker {
    // Predict rpc.
    rpc Predict(RekcurdMessage) returns (RekcurdMessage) {};
    // PredictInputStream rpc.
    rpc PredictInputStream(stream RekcurdMessage) returns (RekcurdMessage) {};
    // PredictOutputStream rpc.
    rpc PredictOutputStream(RekcurdMessage) returns (stream RekcurdMessage) {};
    // PredictInputOutputStream rpc.
    rpc PredictInputOutputStream(stream RekcurdMessage) returns (stream RekcurdMessage) {};
}
