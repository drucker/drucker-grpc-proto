syntax = "proto3";

import "google/protobuf/descriptor.proto";
import "google/protobuf/struct.proto";

package rekcurd.protos;

// [START HealthCheck] https://github.com/grpc/grpc/blob/master/doc/health-checking.md

message HealthCheckRequest {
    string service = 1;
}

message HealthCheckResponse {
    enum ServingStatus {
        UNKNOWN = 0;
        SERVING = 1;
        NOT_SERVING = 2;
    }
    ServingStatus status = 1;
}

service Health {
    rpc Check(HealthCheckRequest) returns (HealthCheckResponse);
}

// [END HealthCheck]


// [START rekcurd.protos version]

extend google.protobuf.FileOptions {
    string rekcurd_grpc_proto_version = 50000;
}
option (rekcurd_grpc_proto_version) = "v3";

enum EnumVersionInfo {
    // Version info. The largest number is the latest version.
    v0 = 0;
    v1 = 1;
    v2 = 2;
    v3 = 3;
}

// [END rekcurd.protos version]


// [START Messages]

message RekcurdMessage {
    Status status = 1;
    JsonFormatString meta = 2;
    oneof data_oneof {
        DefaultData data = 3;
        bytes binData = 4;
        string strData = 5;
        StringList strDataList = 6;
    }
    Score score = 7;
}

message Status {
    enum StatusFlag {
        SUCCESS = 0;
        FAILURE = 1;
    }

    int32 code = 1;
    string info = 2;
    string reason = 3;
    StatusFlag status = 4;
}

message JsonFormatString {
    string val = 1;
}

message DefaultData {
    repeated string names = 1;
    oneof data_oneof {
        Tensor tensor = 2;
        google.protobuf.ListValue ndarray = 3;
    }
}

message Tensor {
    repeated int32 shape = 1;
    repeated double val = 2;
}

message StringList {
    repeated string val = 1;
}

message Score {
    repeated float val = 1;
}

message ServiceInfoRequest {}

message ServiceInfoResponse {
    Status status = 1;
    string applicationName = 2;
    string serviceName = 3;
    string serviceLevel = 4;
}

message FileStream {
    bytes binData = 1;
    string filePath = 2;
}

message SwitchModelRequest {
    string filePath = 1;
}

message EvaluationDataPath {
    string dataPath = 1;
    string resultPath = 2;
}

message EvaluationMetrics {
    int32 num = 1;
    float accuracy = 2;
    repeated float precision = 3;
    repeated float recall = 4;
    repeated float fvalue = 5;
    StringList label = 6;
    JsonFormatString option = 7;
}

message EvaluationResponse {
    Status status = 1;
    EvaluationMetrics metrics = 2;
}

message EvaluationResultResponse {
    message Detail {
        RekcurdMessage input = 1;
        RekcurdMessage output = 2;
        StringList label = 3;
        bool isCorrect = 4;
    }

    Status status = 1;
    EvaluationMetrics metrics = 2;
    repeated Detail detail = 3;
}

// [END Messages]


// [START Services]

service RekcurdDashboard {
    rpc ServiceInfo (ServiceInfoRequest) returns (ServiceInfoResponse) {}
    rpc UploadModel (stream FileStream) returns (Status) {}
    rpc SwitchModel (SwitchModelRequest) returns (Status) {}
    rpc UploadEvaluationData (stream FileStream) returns (Status) {}
    rpc EvaluateModel (EvaluationDataPath) returns (EvaluationResponse) {}
    rpc EvaluationResult (EvaluationDataPath) returns (stream EvaluationResultResponse) {}
}

service RekcurdWorker {
    rpc Predict(RekcurdMessage) returns (RekcurdMessage) {};
}

// [END Services]
