// Template for Drucker
// DO NOT EDIT!

syntax = "proto3";

package drucker;

import "google/protobuf/descriptor.proto";
extend google.protobuf.FileOptions {
    string drucker_grpc_proto_version = 50000;
}
option (drucker_grpc_proto_version) = "v2";

enum EnumVersionInfo {
    // Version info. The largest number is the latest version.
    v0 = 0;
    v1 = 1;
    v2 = 2;
}

// DruckerDashboard: Easy to mange your ML model.
service DruckerDashboard {
    // Get Service Info.
    rpc ServiceInfo (ServiceInfoRequest) returns (ServiceInfoResponse) {}

    // Upload your latest ML model.
    rpc UploadModel (stream UploadModelRequest) returns (ModelResponse) {}

    // Switch your ML model to run.
    rpc SwitchModel (SwitchModelRequest) returns (ModelResponse) {}

    // Evaluate the accuracy of your ML model.
    rpc EvaluateModel (stream EvaluateModelRequest) returns (EvaluateModelResponse) {}

    // Get detailed result of EvaluateModel
    rpc EvaluationResult (EvaluationResultRequest) returns (stream EvaluationResultResponse) {}
}

// DruckerWorker: Easy to perform your ML service.
service DruckerWorker {
    // Input string, output string.
    rpc Predict_String_String (StringInput) returns (StringOutput) {}

    // Input string, output bytes.
    rpc Predict_String_Bytes (StringInput) returns (stream BytesOutput) {}

    // Input string, output array[int].
    rpc Predict_String_ArrInt (StringInput) returns (ArrIntOutput) {}

    // Input string, output array[float].
    rpc Predict_String_ArrFloat (StringInput) returns (ArrFloatOutput) {}

    // Input string, output array[string].
    rpc Predict_String_ArrString (StringInput) returns (ArrStringOutput) {}


    // Input bytes, output string.
    rpc Predict_Bytes_String (stream BytesInput) returns (StringOutput) {}

    // Input bytes, output bytes.
    rpc Predict_Bytes_Bytes (stream BytesInput) returns (stream BytesOutput) {}

    // Input bytes, output array[int].
    rpc Predict_Bytes_ArrInt (stream BytesInput) returns (ArrIntOutput) {}

    // Input bytes, output array[float].
    rpc Predict_Bytes_ArrFloat (stream BytesInput) returns (ArrFloatOutput) {}

    // Input bytes, output array[string].
    rpc Predict_Bytes_ArrString (stream BytesInput) returns (ArrStringOutput) {}


    // Input array[int], output string.
    rpc Predict_ArrInt_String (ArrIntInput) returns (StringOutput) {}

    // Input array[int], output bytes.
    rpc Predict_ArrInt_Bytes (ArrIntInput) returns (stream BytesOutput) {}

    // Input array[int], output array[int].
    rpc Predict_ArrInt_ArrInt (ArrIntInput) returns (ArrIntOutput) {}

    // Input array[int], output array[float].
    rpc Predict_ArrInt_ArrFloat (ArrIntInput) returns (ArrFloatOutput) {}

    // Input array[int], output array[string].
    rpc Predict_ArrInt_ArrString (ArrIntInput) returns (ArrStringOutput) {}


    // Input array[float], output string.
    rpc Predict_ArrFloat_String (ArrFloatInput) returns (StringOutput) {}

    // Input array[float], output bytes.
    rpc Predict_ArrFloat_Bytes (ArrFloatInput) returns (stream BytesOutput) {}

    // Input array[float], output array[int].
    rpc Predict_ArrFloat_ArrInt (ArrFloatInput) returns (ArrIntOutput) {}

    // Input array[float], output array[float].
    rpc Predict_ArrFloat_ArrFloat (ArrFloatInput) returns (ArrFloatOutput) {}

    // Input array[float], output array[string].
    rpc Predict_ArrFloat_ArrString (ArrFloatInput) returns (ArrStringOutput) {}


    // Input array[string], output string.
    rpc Predict_ArrString_String (ArrStringInput) returns (StringOutput) {}

    // Input array[string], output bytes.
    rpc Predict_ArrString_Bytes (ArrStringInput) returns (stream BytesOutput) {}

    // Input array[string], output array[int].
    rpc Predict_ArrString_ArrInt (ArrStringInput) returns (ArrIntOutput) {}

    // Input array[string], output array[float].
    rpc Predict_ArrString_ArrFloat (ArrStringInput) returns (ArrFloatOutput) {}

    // Input array[string], output array[string].
    rpc Predict_ArrString_ArrString (ArrStringInput) returns (ArrStringOutput) {}
}

message ArrInt32 {
    repeated int32 val = 1;
}

message ArrInt64 {
    repeated int64 val = 1;
}

message ArrUint32 {
    repeated uint32 val = 1;
}

message ArrUint64 {
    repeated uint64 val = 1;
}

message ArrSint32 {
    repeated sint32 val = 1;
}

message ArrSint64 {
    repeated sint64 val = 1;
}

message ArrFixed32 {
    repeated fixed32 val = 1;
}

message ArrFixed64 {
    repeated fixed64 val = 1;
}

message ArrSfixed32 {
    repeated sfixed32 val = 1;
}

message ArrSfixed64 {
    repeated sfixed64 val = 1;
}

message ArrFloat {
    repeated float val = 1;
}

message ArrDouble {
    repeated double val = 1;
}

message ArrBool {
    repeated bool val = 1;
}

message ArrString {
    repeated string val = 1;
}

// Supported type of Input/Output data
message SingleIO {
    oneof io_oneof {
        int32 int32_val = 1;
        int64 int64_val = 2;
        uint32 uint32_val = 3;
        uint64 uint64_val = 4;
        sint32 sint32_val = 5;
        sint64 sint64_val = 6;
        fixed32 fixed32_val = 7;
        fixed64 fixed64_val = 8;
        sfixed32 sfixed32_val = 9;
        sfixed64 sfixed64_val = 10;
        float float_val = 11;
        double double_val = 12;
        bool bool_val = 13;
        string string_val = 14;
    }
}

message MultiIO {
    oneof io_oneof {
        ArrInt32 int32_val = 1;
        ArrInt64 int64_val = 2;
        ArrUint32 uint32_val = 3;
        ArrUint64 uint64_val = 4;
        ArrSint32 sint32_val = 5;
        ArrSint64 sint64_val = 6;
        ArrFixed32 fixed32_val = 7;
        ArrFixed64 fixed64_val = 8;
        ArrSfixed32 sfixed32_val = 9;
        ArrSfixed64 sfixed64_val = 10;
        ArrFloat float_val = 11;
        ArrDouble double_val = 12;
        ArrBool bool_val = 13;
        ArrString string_val = 14;
    }
}

message IO {
    oneof io_oneof {
        SingleIO single = 1;
        MultiIO multi = 2;
    }
}

message SingleLabel {
    SingleIO io = 1;
    float score = 2;
}

message MultiLabel {
    MultiIO io = 1;
    repeated float score = 2;
}

message Label {
    oneof label_oneof {
        SingleLabel single = 1;
        MultiLabel multi = 2;
    }
}

// Request of ServiceInfo.
message ServiceInfoRequest {}

// Response of ServiceInfo.
message ServiceInfoResponse {
    string application_name = 1;
    string service_name = 2;
    string service_level = 3;
}

// Request of UploadModel.
message UploadModelRequest {
    string path = 1;
    bytes data = 2;
}

// Request of SwitchModel.
message SwitchModelRequest {
    string path = 1;
}

// Response of ModelControl (Upload / Switch / Delete).
message ModelResponse {
    int32 status = 1;
    string message = 2;
}

// Request of EvaluateModel.
message EvaluateModelRequest {
    bytes data = 1;
    string data_path = 2;
}

message EvaluationMetrics {
    int32 num = 1;
    float accuracy = 2;
    repeated float precision = 3;
    repeated float recall = 4;
    repeated float fvalue = 5;

    // additional metrics
    map<string, float> option = 6;
}

// Response of EvaluateModel.
message EvaluateModelResponse {
    EvaluationMetrics metrics = 1;
}

// Request of EvaluationResult.
message EvaluationResultRequest {
    string data_path = 1;
}

// Response of EvaluationResult.
message EvaluationResultResponse {
    EvaluationMetrics metrics = 1;

    message Detail {
        bytes data = 1;
        bool is_correct = 2;
        Label label = 3;
    }

    repeated Detail detail = 2;
}

// Option (json format).
message Option {
    string val = 1;
}

// Input string
message StringInput {
    string input = 1;
    Option option = 2;
}

// Input bytes
message BytesInput {
    bytes input = 1;
    Option option = 2;
}

// Input array[int]
message ArrIntInput {
    repeated int32 input = 1;
    Option option = 2;
}

// Input array[float]
message ArrFloatInput {
    repeated float input = 1;
    Option option = 2;
}

// Input array[float]
message ArrStringInput {
    repeated string input = 1;
    Option option = 2;
}

// Output string
message StringOutput {
    string output = 1;
    float score = 2;
    Option option = 3;
}

// Output bytes
message BytesOutput {
    bytes output = 1;
    float score = 2;
    Option option = 3;
}

// Output array[int]
message ArrIntOutput {
    repeated int32 output = 1;
    repeated float score = 2;
    Option option = 3;
}

// Output array[float]
message ArrFloatOutput {
    repeated float output = 1;
    repeated float score = 2;
    Option option = 3;
}

// Output array[string]
message ArrStringOutput {
    repeated string output = 1;
    repeated float score = 2;
    Option option = 3;
}
