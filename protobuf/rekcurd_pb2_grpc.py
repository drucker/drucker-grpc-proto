# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import rekcurd_pb2 as rekcurd__pb2


class HealthStub(object):
  """Health service.
  https://github.com/grpc/grpc/blob/master/doc/health-checking.md
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Check = channel.unary_unary(
        '/rekcurd.protos.Health/Check',
        request_serializer=rekcurd__pb2.HealthCheckRequest.SerializeToString,
        response_deserializer=rekcurd__pb2.HealthCheckResponse.FromString,
        )
    self.Watch = channel.unary_stream(
        '/rekcurd.protos.Health/Watch',
        request_serializer=rekcurd__pb2.HealthCheckRequest.SerializeToString,
        response_deserializer=rekcurd__pb2.HealthCheckResponse.FromString,
        )


class HealthServicer(object):
  """Health service.
  https://github.com/grpc/grpc/blob/master/doc/health-checking.md
  """

  def Check(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Watch(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_HealthServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Check': grpc.unary_unary_rpc_method_handler(
          servicer.Check,
          request_deserializer=rekcurd__pb2.HealthCheckRequest.FromString,
          response_serializer=rekcurd__pb2.HealthCheckResponse.SerializeToString,
      ),
      'Watch': grpc.unary_stream_rpc_method_handler(
          servicer.Watch,
          request_deserializer=rekcurd__pb2.HealthCheckRequest.FromString,
          response_serializer=rekcurd__pb2.HealthCheckResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'rekcurd.protos.Health', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class RekcurdDashboardStub(object):
  """RekcurdDashboard service.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ServiceInfo = channel.unary_unary(
        '/rekcurd.protos.RekcurdDashboard/ServiceInfo',
        request_serializer=rekcurd__pb2.ServiceInfoRequest.SerializeToString,
        response_deserializer=rekcurd__pb2.ServiceInfoResponse.FromString,
        )
    self.UploadModel = channel.stream_unary(
        '/rekcurd.protos.RekcurdDashboard/UploadModel',
        request_serializer=rekcurd__pb2.FileStream.SerializeToString,
        response_deserializer=rekcurd__pb2.Status.FromString,
        )
    self.SwitchModel = channel.unary_unary(
        '/rekcurd.protos.RekcurdDashboard/SwitchModel',
        request_serializer=rekcurd__pb2.SwitchModelRequest.SerializeToString,
        response_deserializer=rekcurd__pb2.Status.FromString,
        )
    self.UploadEvaluationData = channel.stream_unary(
        '/rekcurd.protos.RekcurdDashboard/UploadEvaluationData',
        request_serializer=rekcurd__pb2.FileStream.SerializeToString,
        response_deserializer=rekcurd__pb2.Status.FromString,
        )
    self.EvaluateModel = channel.unary_unary(
        '/rekcurd.protos.RekcurdDashboard/EvaluateModel',
        request_serializer=rekcurd__pb2.EvaluationDataPath.SerializeToString,
        response_deserializer=rekcurd__pb2.EvaluationResponse.FromString,
        )
    self.EvaluationResult = channel.unary_stream(
        '/rekcurd.protos.RekcurdDashboard/EvaluationResult',
        request_serializer=rekcurd__pb2.EvaluationDataPath.SerializeToString,
        response_deserializer=rekcurd__pb2.EvaluationResultResponse.FromString,
        )


class RekcurdDashboardServicer(object):
  """RekcurdDashboard service.
  """

  def ServiceInfo(self, request, context):
    """ServiceInfo rpc.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def UploadModel(self, request_iterator, context):
    """UploadModel rpc.
    :NOTE: This method won't be used from Rekcurd-dashboard users.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SwitchModel(self, request, context):
    """SwitchModel rpc.
    :NOTE: This method won't be used from Rekcurd-dashboard users.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def UploadEvaluationData(self, request_iterator, context):
    """UploadEvaluationData rpc.
    :NOTE: This method won't be used from Rekcurd-dashboard users.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def EvaluateModel(self, request, context):
    """EvaluateModel rpc.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def EvaluationResult(self, request, context):
    """EvaluationResult rpc.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_RekcurdDashboardServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ServiceInfo': grpc.unary_unary_rpc_method_handler(
          servicer.ServiceInfo,
          request_deserializer=rekcurd__pb2.ServiceInfoRequest.FromString,
          response_serializer=rekcurd__pb2.ServiceInfoResponse.SerializeToString,
      ),
      'UploadModel': grpc.stream_unary_rpc_method_handler(
          servicer.UploadModel,
          request_deserializer=rekcurd__pb2.FileStream.FromString,
          response_serializer=rekcurd__pb2.Status.SerializeToString,
      ),
      'SwitchModel': grpc.unary_unary_rpc_method_handler(
          servicer.SwitchModel,
          request_deserializer=rekcurd__pb2.SwitchModelRequest.FromString,
          response_serializer=rekcurd__pb2.Status.SerializeToString,
      ),
      'UploadEvaluationData': grpc.stream_unary_rpc_method_handler(
          servicer.UploadEvaluationData,
          request_deserializer=rekcurd__pb2.FileStream.FromString,
          response_serializer=rekcurd__pb2.Status.SerializeToString,
      ),
      'EvaluateModel': grpc.unary_unary_rpc_method_handler(
          servicer.EvaluateModel,
          request_deserializer=rekcurd__pb2.EvaluationDataPath.FromString,
          response_serializer=rekcurd__pb2.EvaluationResponse.SerializeToString,
      ),
      'EvaluationResult': grpc.unary_stream_rpc_method_handler(
          servicer.EvaluationResult,
          request_deserializer=rekcurd__pb2.EvaluationDataPath.FromString,
          response_serializer=rekcurd__pb2.EvaluationResultResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'rekcurd.protos.RekcurdDashboard', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class RekcurdWorkerStub(object):
  """RekcurdWorker service.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Predict = channel.unary_unary(
        '/rekcurd.protos.RekcurdWorker/Predict',
        request_serializer=rekcurd__pb2.RekcurdMessage.SerializeToString,
        response_deserializer=rekcurd__pb2.RekcurdMessage.FromString,
        )
    self.PredictInputStream = channel.stream_unary(
        '/rekcurd.protos.RekcurdWorker/PredictInputStream',
        request_serializer=rekcurd__pb2.RekcurdMessage.SerializeToString,
        response_deserializer=rekcurd__pb2.RekcurdMessage.FromString,
        )
    self.PredictOutputStream = channel.unary_stream(
        '/rekcurd.protos.RekcurdWorker/PredictOutputStream',
        request_serializer=rekcurd__pb2.RekcurdMessage.SerializeToString,
        response_deserializer=rekcurd__pb2.RekcurdMessage.FromString,
        )
    self.PredictInputOutputStream = channel.stream_stream(
        '/rekcurd.protos.RekcurdWorker/PredictInputOutputStream',
        request_serializer=rekcurd__pb2.RekcurdMessage.SerializeToString,
        response_deserializer=rekcurd__pb2.RekcurdMessage.FromString,
        )


class RekcurdWorkerServicer(object):
  """RekcurdWorker service.
  """

  def Predict(self, request, context):
    """Predict rpc.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def PredictInputStream(self, request_iterator, context):
    """PredictInputStream rpc.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def PredictOutputStream(self, request, context):
    """PredictOutputStream rpc.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def PredictInputOutputStream(self, request_iterator, context):
    """PredictInputOutputStream rpc.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_RekcurdWorkerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Predict': grpc.unary_unary_rpc_method_handler(
          servicer.Predict,
          request_deserializer=rekcurd__pb2.RekcurdMessage.FromString,
          response_serializer=rekcurd__pb2.RekcurdMessage.SerializeToString,
      ),
      'PredictInputStream': grpc.stream_unary_rpc_method_handler(
          servicer.PredictInputStream,
          request_deserializer=rekcurd__pb2.RekcurdMessage.FromString,
          response_serializer=rekcurd__pb2.RekcurdMessage.SerializeToString,
      ),
      'PredictOutputStream': grpc.unary_stream_rpc_method_handler(
          servicer.PredictOutputStream,
          request_deserializer=rekcurd__pb2.RekcurdMessage.FromString,
          response_serializer=rekcurd__pb2.RekcurdMessage.SerializeToString,
      ),
      'PredictInputOutputStream': grpc.stream_stream_rpc_method_handler(
          servicer.PredictInputOutputStream,
          request_deserializer=rekcurd__pb2.RekcurdMessage.FromString,
          response_serializer=rekcurd__pb2.RekcurdMessage.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'rekcurd.protos.RekcurdWorker', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
